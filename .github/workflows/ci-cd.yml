name: Yappa Challenge DevOps CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "app/**"
      - "terraform/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main, develop]

env:
  GCP_PROJECT_ID: yappa-challenge-devops
  SERVICE_NAME: yappa-spring-boot-service
  TF_STATE_BUCKET: yappa-challenge-tfstate
  REGION: southamerica-east1

jobs:
  # 1. BUILD - Compilar aplicación Spring Boot
  build:
    runs-on: ubuntu-latest
    name: Build Spring Boot Application

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Spring Boot JAR
        run: |
          cd app
          mvn clean compile package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: app/target/*.jar

      - name: Upload app source
        uses: actions/upload-artifact@v4
        with:
          name: app-source
          path: app/

  # 2. INFRASTRUCTURE - Crear toda la infraestructura con Terraform
  infrastructure:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Autenticar con Google Cloud (ADC)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Verify or Create Terraform State Bucket
        run: |
          echo "🗄️ Verificando bucket de Terraform state..."
          if gcloud storage buckets describe gs://${{ env.TF_STATE_BUCKET }} --project=${{ env.GCP_PROJECT_ID }} >/dev/null 2>&1; then
            echo "✅ Bucket de state existe: gs://${{ env.TF_STATE_BUCKET }}"
          else
            echo "🆕 Creando bucket de Terraform state..."
            gcloud storage buckets create gs://${{ env.TF_STATE_BUCKET }} \
              --project=${{ env.GCP_PROJECT_ID }} \
              --location=southamerica-east1 \
              --uniform-bucket-level-access
            echo "🔒 Habilitando versionado en el bucket..."
            gcloud storage buckets update gs://${{ env.TF_STATE_BUCKET }} --versioning
            echo "✅ Bucket de state creado y configurado"
          fi

      - name: Terraform Init, Refresh and Apply
        run: |
          cd terraform

          PROJECT_ID="${{ env.GCP_PROJECT_ID }}"
          REGION="${{ env.REGION }}"
          BUCKET_NAME="${{ env.TF_STATE_BUCKET }}"

          echo ""
          echo "═══════════════════════════════════════════════════════════════"
          echo "🚀 TERRAFORM DEPLOYMENT"
          echo "═══════════════════════════════════════════════════════════════"
          echo ""

          echo "📦 Paso 1: Inicializando Terraform con backend en GCS..."
          terraform init
          echo "✅ Inicialización completada"
          echo ""

          # (el resto de tu script terraform tal cual...)

          terraform validate
          terraform refresh \
            -var="project_id=$PROJECT_ID" \
            -var="region=$REGION" \
            -var="environment=dev" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="storage_bucket_name=$BUCKET_NAME" \
            -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
            -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}" || echo "⚠️ Refresh completado con advertencias"

          terraform plan \
            -var="project_id=$PROJECT_ID" \
            -var="region=$REGION" \
            -var="environment=dev" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="storage_bucket_name=$BUCKET_NAME" \
            -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
            -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}" \
            -out=tfplan

          terraform apply -auto-approve tfplan

      - name: Terraform Outputs
        run: |
          cd terraform
          echo "📊 Infrastructure Outputs:"
          CLOUDSQL_PRIVATE_IP=$(terraform output -raw cloudsql_private_ip)
          echo "Cloud SQL Private IP: $CLOUDSQL_PRIVATE_IP"
          terraform output

  # 3. DOCKER - Construir y subir imagen
  docker-build-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    needs: infrastructure
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download app source
        uses: actions/download-artifact@v4
        with:
          name: app-source
          path: ./app

      - name: Autenticar con Google Cloud (ADC)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Docker credentials
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and Push Docker images
        run: |
          cd app
          echo "🔨 Building Docker image..."
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }} .
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:latest .

          echo "📦 Pushing images..."
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:latest

  # 4. DEPLOY - Desplegar aplicación en Cloud Run
  deploy-cloud-run:
    runs-on: ubuntu-latest
    name: Deploy to Cloud Run
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Autenticar con Google Cloud (ADC)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Cloud Run credentials
        run: |
          gcloud config set project ${{ env.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          echo "🚀 Deploying to Cloud Run..."
          CLOUDSQL_PRIVATE_IP=$(cd terraform && terraform output -raw cloudsql_private_ip)
          echo "Usando Cloud SQL Private IP: $CLOUDSQL_PRIVATE_IP"
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --max-instances=10 \
            --min-instances=1 \
            --port=8080 \
            --set-env-vars="SPRING_PROFILES_ACTIVE=dev,ENVIRONMENT=dev,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},CLOUD_SQL_INSTANCE_IP=$CLOUDSQL_PRIVATE_IP" \
            --vpc-connector=projects/${{ env.GCP_PROJECT_ID }}/locations/${{ env.REGION }}/connectors/yappa-vpc-connector \
            --vpc-egress=private-ranges-only

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "🌐 Service URL: $SERVICE_URL"

          sleep 30
          curl -f "$SERVICE_URL/" && echo "✅ Root: OK" || echo "❌ Root: FAILED"
          curl -f "$SERVICE_URL/actuator/health" && echo "✅ Health: OK" || echo "❌ Health: FAILED"

          echo "🎉 Deployment completed!"
