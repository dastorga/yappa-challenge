name: Yappa Challenge DevOps CI/CD - SIMPLIFIED

on:
  push:
    branches: [main, develop]
    paths:
      - "app/**"
      - "terraform/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main, develop]

env:
  GCP_PROJECT_ID: yappa-challenge-devops
  SERVICE_NAME: yappa-spring-boot-service

jobs:
  # 1. BUILD - Compilar aplicaci√≥n Spring Boot
  build:
    runs-on: ubuntu-latest
    name: Build Spring Boot Application

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Spring Boot JAR
        run: |
          cd app
          mvn clean compile package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: app/target/*.jar

      - name: Upload app source
        uses: actions/upload-artifact@v4
        with:
          name: app-source
          path: app/

  # 2. INFRASTRUCTURE - Crear toda la infraestructura con Terraform
  infrastructure:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up GCP credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ secrets.PROJECT_ID }}
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Terraform Init, Import and Apply
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        run: |
          cd terraform

          echo "üöÄ Initializing Terraform..."
          terraform init

          # Set variables
          PROJECT_ID="${{ secrets.PROJECT_ID }}"
          REGION="${{ secrets.REGION }}"
          BUCKET_NAME="${{ secrets.STORAGE_BUCKET_NAME }}"

          echo "üì• Force importing existing resources to avoid 409 errors..."

          # Import all resources that commonly exist - ignore errors if not found
          echo "Importing VPC Network..."
          terraform import google_compute_network.vpc "projects/$PROJECT_ID/global/networks/yappa-vpc" 2>/dev/null || echo "VPC not imported (may not exist)"

          echo "Importing VPN Gateway IP..."
          terraform import google_compute_address.vpn_gateway_ip "projects/$PROJECT_ID/regions/$REGION/addresses/vpn-gateway-ip" 2>/dev/null || echo "VPN IP not imported"

          echo "Importing Storage Buckets..."
          terraform import google_storage_bucket.bucket "$BUCKET_NAME" 2>/dev/null || echo "Main bucket not imported"
          terraform import google_storage_bucket.logs_bucket "$BUCKET_NAME-logs" 2>/dev/null || echo "Logs bucket not imported"

          echo "Importing Service Accounts..."
          terraform import google_service_account.cloud_run_sa "projects/$PROJECT_ID/serviceAccounts/cloud-run-sa@$PROJECT_ID.iam.gserviceaccount.com" 2>/dev/null || echo "Cloud Run SA not imported"
          terraform import google_service_account.admin_sa "projects/$PROJECT_ID/serviceAccounts/yappa-admin-sa@$PROJECT_ID.iam.gserviceaccount.com" 2>/dev/null || echo "Admin SA not imported"
          terraform import google_service_account.backup_sa "projects/$PROJECT_ID/serviceAccounts/yappa-backup-sa@$PROJECT_ID.iam.gserviceaccount.com" 2>/dev/null || echo "Backup SA not imported"
          terraform import google_service_account.vpn_test_sa "projects/$PROJECT_ID/serviceAccounts/vpn-test-sa@$PROJECT_ID.iam.gserviceaccount.com" 2>/dev/null || echo "VPN Test SA not imported"

          echo "üìä Resources in Terraform state after import:"
          terraform state list

          echo "‚úÖ Validating configuration..."
          terraform validate

          echo "üìã Planning infrastructure..."
          terraform plan \
            -var="project_id=$PROJECT_ID" \
            -var="region=$REGION" \
            -var="environment=dev" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="storage_bucket_name=$BUCKET_NAME" \
            -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
            -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}"

          echo "üèóÔ∏è Applying infrastructure..."
          terraform apply -auto-approve \
            -var="project_id=$PROJECT_ID" \
            -var="region=$REGION" \
            -var="environment=dev" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="storage_bucket_name=$BUCKET_NAME" \
            -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
            -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}"

  # 3. DOCKER - Construir y subir imagen
  docker-build-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    needs: infrastructure
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Download app source
        uses: actions/download-artifact@v4
        with:
          name: app-source
          path: ./app

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Docker credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Build and Push Docker images
        run: |
          cd app
          echo "üî® Building Docker image..."
          docker build -t ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }} .
          docker build -t ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:latest .

          echo "üì¶ Pushing images..."
          docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }}
          docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:latest

  # 4. DEPLOY - Desplegar aplicaci√≥n en Cloud Run
  deploy-cloud-run:
    runs-on: ubuntu-latest
    name: Deploy to Cloud Run
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Cloud Run credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Deploy to Cloud Run
        run: |
          echo "üöÄ Deploying to Cloud Run..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }} \
            --region=${{ secrets.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --max-instances=10 \
            --min-instances=1 \
            --port=8080 \
            --set-env-vars="SPRING_PROFILES_ACTIVE=dev,ENVIRONMENT=dev,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},CLOUD_SQL_INSTANCE_IP=10.2.0.3" \
            --vpc-connector=projects/${{ env.GCP_PROJECT_ID }}/locations/${{ secrets.REGION }}/connectors/yappa-vpc-connector \
            --vpc-egress=private-ranges-only

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ secrets.REGION }} --format='value(status.url)')
          echo "üåê Service URL: $SERVICE_URL"

          sleep 30
          curl -f "$SERVICE_URL/" && echo "‚úÖ Root: OK" || echo "‚ùå Root: FAILED"
          curl -f "$SERVICE_URL/actuator/health" && echo "‚úÖ Health: OK" || echo "‚ùå Health: FAILED"

          echo "üéâ Deployment completed!"
