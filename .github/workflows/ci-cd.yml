name: Yappa Challenge DevOps CI/CD - ORDERED

on:
  push:
    branches: [main, develop]
    paths:
      - "app/**"
      - "terraform/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main, develop]

env:
  GCP_PROJECT_ID: yappa-challenge-devops
  SERVICE_NAME: yappa-spring-boot-service

jobs:
  # 1. BUILD - Compilar aplicaci√≥n Spring Boot
  build:
    runs-on: ubuntu-latest
    name: Build Spring Boot Application

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Spring Boot JAR
        run: |
          cd app
          mvn clean compile package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: app/target/*.jar

      - name: Upload app source
        uses: actions/upload-artifact@v4
        with:
          name: app-source
          path: app/

  # 2. INFRASTRUCTURE - Crear toda la infraestructura con Terraform
  infrastructure:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up GCP credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ secrets.PROJECT_ID }}
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Terraform Deploy with GCS Backend
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          REGION: ${{ secrets.REGION }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          STORAGE_BUCKET_NAME: ${{ secrets.STORAGE_BUCKET_NAME }}
          PEER_EXTERNAL_IP: ${{ secrets.PEER_EXTERNAL_IP }}
          VPN_SHARED_SECRET: ${{ secrets.VPN_SHARED_SECRET }}
        run: |
          cd terraform
          
          echo "‚òÅÔ∏è Initializing Terraform with GCS remote state..."
          echo "üìç State bucket: yappa-terraform-state"
          echo "üìÇ State prefix: terraform/state"
          
          # Asegurar acceso al bucket de estado
          gsutil ls gs://yappa-terraform-state/ >/dev/null 2>&1 || {
            echo "üóÑÔ∏è Creating Terraform state bucket..."
            gsutil mb gs://yappa-terraform-state/
            gsutil versioning set on gs://yappa-terraform-state/
          }
          
          terraform init -reconfigure
          terraform validate
          
          echo "üîÑ Refreshing state from GCS backend..."
          terraform refresh \
            -var="project_id=$PROJECT_ID" \
            -var="region=$REGION" \
            -var="environment=dev" \
            -var="db_password=$DB_PASSWORD" \
            -var="storage_bucket_name=$STORAGE_BUCKET_NAME" \
            -var="peer_external_ip=$PEER_EXTERNAL_IP" \
            -var="vpn_shared_secret=$VPN_SHARED_SECRET"
          
          echo "üìã Checking current state..."
          terraform state list | head -10
          
          echo "üöÄ Applying infrastructure changes (handling existing resources)..."
          terraform apply -auto-approve \
            -var="project_id=$PROJECT_ID" \
            -var="region=$REGION" \
            -var="environment=dev" \
            -var="db_password=$DB_PASSWORD" \
            -var="storage_bucket_name=$STORAGE_BUCKET_NAME" \
            -var="peer_external_ip=$PEER_EXTERNAL_IP" \
            -var="vpn_shared_secret=$VPN_SHARED_SECRET" || {
              
              echo "‚ö†Ô∏è Apply encountered conflicts, trying import strategy..."
              ./handle-existing-resources.sh
            }      - name: Verify Infrastructure
        run: |
          echo "‚úÖ Infrastructure deployment completed"
          echo "üìä Terraform state summary:"
          cd terraform && terraform state list | wc -l
          echo "üîó VPC Connector created: yappa-vpc-connector"
          echo "üêò Cloud SQL instance ready"
          echo "üóÑÔ∏è Artifact Registry ready"

  # 3. DOCKER - Construir y subir imagen (despu√©s de infraestructura)
  docker-build-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    needs: infrastructure
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Download app source
        uses: actions/download-artifact@v4
        with:
          name: app-source
          path: ./app

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Docker credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev

      - name: Build Docker images
        run: |
          cd app
          echo "üî® Building Docker image..."
          docker build -t ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }} .
          docker build -t ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:latest .

      - name: Push images to Artifact Registry
        run: |
          echo "üì¶ Pushing images to Artifact Registry..."
          docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }}
          docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:latest
          echo "‚úÖ Images pushed successfully"

  # 4. DEPLOY - Desplegar aplicaci√≥n en Cloud Run (al final)
  deploy-cloud-run:
    runs-on: ubuntu-latest
    name: Deploy to Cloud Run
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Cloud Run credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Deploy to Cloud Run
        run: |
          echo "üöÄ Deploying to Cloud Run..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }} \
            --region=${{ secrets.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --max-instances=10 \
            --min-instances=1 \
            --port=8080 \
            --set-env-vars="SPRING_PROFILES_ACTIVE=dev,ENVIRONMENT=dev,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},CLOUD_SQL_INSTANCE_IP=10.2.0.3" \
            --vpc-connector=projects/${{ env.GCP_PROJECT_ID }}/locations/${{ secrets.REGION }}/connectors/yappa-vpc-connector \
            --vpc-egress=private-ranges-only

      - name: Verify deployment and test endpoints
        run: |
          echo "üîç Verifying deployment..."
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ secrets.REGION }} --format='value(status.url)')
          echo "üåê Service deployed at: $SERVICE_URL"

          echo "‚è≥ Waiting for service to be ready..."
          sleep 30

          echo "üß™ Testing endpoints..."
          curl -f "$SERVICE_URL/" && echo "‚úÖ Root endpoint: OK" || echo "‚ùå Root endpoint: FAILED"
          curl -f "$SERVICE_URL/actuator/health" && echo "‚úÖ Health check: OK" || echo "‚ùå Health check: FAILED"
          curl -f "$SERVICE_URL/api/info" && echo "‚úÖ API info: OK" || echo "‚ùå API info: FAILED"

          echo "üéâ Deployment completed successfully!"
          echo "üì± Your app is live at: $SERVICE_URL"
