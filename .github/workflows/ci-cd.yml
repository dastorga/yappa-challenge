name: Yappa Challenge DevOps CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "app/**"
      - "terraform/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main, develop]

env:
  GCP_PROJECT_ID: yappa-challenge-devops
  SERVICE_NAME: yappa-spring-boot-service
  TF_STATE_BUCKET: yappa-challenge-tfstate

jobs:
  # 1. BUILD - Compilar aplicaci√≥n Spring Boot
  build:
    runs-on: ubuntu-latest
    name: Build Spring Boot Application

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Spring Boot JAR
        run: |
          cd app
          mvn clean compile package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: app/target/*.jar

      - name: Upload app source
        uses: actions/upload-artifact@v4
        with:
          name: app-source
          path: app/

  # 2. INFRASTRUCTURE - Crear toda la infraestructura con Terraform
  infrastructure:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up GCP credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ secrets.PROJECT_ID }}
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
           GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json

      - name: Verify or Create Terraform State Bucket
        run: |
          echo "üóÑÔ∏è Verificando bucket de Terraform state..."

          if gcloud storage buckets describe gs://${{ env.TF_STATE_BUCKET }} --project=${{ secrets.PROJECT_ID }} >/dev/null 2>&1; then
            echo "‚úÖ Bucket de state existe: gs://${{ env.TF_STATE_BUCKET }}"
          else
            echo "üÜï Creando bucket de Terraform state..."
            gcloud storage buckets create gs://${{ env.TF_STATE_BUCKET }} \
              --project=${{ secrets.PROJECT_ID }} \
          env:
            GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
              --location=southamerica-east1 \
              --uniform-bucket-level-access
            
            echo "üîí Habilitando versionado en el bucket..."
            gcloud storage buckets update gs://${{ env.TF_STATE_BUCKET }} --versioning
            
            echo "‚úÖ Bucket de state creado y configurado"
          fi

      - name: Terraform Init, Refresh and Apply
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        run: |
          cd terraform

          # Set variables
          PROJECT_ID="${{ secrets.PROJECT_ID }}"
          REGION="${{ secrets.REGION }}"
          BUCKET_NAME="${{ secrets.STORAGE_BUCKET_NAME }}"

          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "üöÄ TERRAFORM DEPLOYMENT - PRIMERA O SIGUIENTES EJECUCIONES"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""

          echo "üì¶ Paso 1: Inicializando Terraform con backend en GCS..."
          terraform init
          echo "‚úÖ Inicializaci√≥n completada"
          echo ""

          echo "üîç Paso 2: Verificando si App Engine ya existe..."
          # Verificar si App Engine existe en GCP
          if gcloud app describe --project=$PROJECT_ID >/dev/null 2>&1; then
            echo "‚úÖ App Engine existe en GCP"
            
            # Verificar si ya est√° en el state
            if ! terraform state show google_app_engine_application.app_engine_application >/dev/null 2>&1; then
              echo "üì• Importando App Engine al Terraform state..."
              terraform import \
                -var="project_id=$PROJECT_ID" \
                -var="region=$REGION" \
                -var="environment=dev" \
                -var="db_password=${{ secrets.DB_PASSWORD }}" \
                -var="storage_bucket_name=$BUCKET_NAME" \
                -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
                -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}" \
                google_app_engine_application.app_engine_application \
                $PROJECT_ID
              echo "‚úÖ App Engine importado correctamente"
            else
              echo "‚úÖ App Engine ya est√° en el state"
            fi
          else
            echo "‚ÑπÔ∏è App Engine no existe, Terraform lo crear√°"
          fi
          echo ""

          echo "üîç Paso 2b: Verificando si VPN Gateway y recursos relacionados ya existen..."
          # Verificar si VPN Gateway existe en GCP
          if gcloud compute target-vpn-gateways describe yappa-vpn-gateway --region=$REGION --project=$PROJECT_ID >/dev/null 2>&1; then
            echo "‚úÖ VPN Gateway existe en GCP"
            
            # Verificar si ya est√° en el state
            if ! terraform state show google_compute_vpn_gateway.vpn_gateway >/dev/null 2>&1; then
              echo "üì• Importando VPN Gateway al Terraform state..."
              terraform import \
                -var="project_id=$PROJECT_ID" \
                -var="region=$REGION" \
                -var="environment=dev" \
                -var="db_password=${{ secrets.DB_PASSWORD }}" \
                -var="storage_bucket_name=$BUCKET_NAME" \
                -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
                -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}" \
                google_compute_vpn_gateway.vpn_gateway \
                $PROJECT_ID/$REGION/yappa-vpn-gateway
              echo "‚úÖ VPN Gateway importado correctamente"
            else
              echo "‚úÖ VPN Gateway ya est√° en el state"
            fi

            # Importar Forwarding Rules si existen
            echo "üì• Importando Forwarding Rules..."
            
            if gcloud compute forwarding-rules describe fr-esp --region=$REGION --project=$PROJECT_ID >/dev/null 2>&1; then
              if ! terraform state show google_compute_forwarding_rule.fr_esp >/dev/null 2>&1; then
                terraform import \
                  -var="project_id=$PROJECT_ID" \
                  -var="region=$REGION" \
                  -var="environment=dev" \
                  -var="db_password=${{ secrets.DB_PASSWORD }}" \
                  -var="storage_bucket_name=$BUCKET_NAME" \
                  -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
                  -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}" \
                  google_compute_forwarding_rule.fr_esp \
                  $PROJECT_ID/$REGION/fr-esp || echo "‚ö†Ô∏è No se pudo importar fr-esp"
              fi
            fi
            
            if gcloud compute forwarding-rules describe fr-udp500 --region=$REGION --project=$PROJECT_ID >/dev/null 2>&1; then
              if ! terraform state show google_compute_forwarding_rule.fr_udp500 >/dev/null 2>&1; then
                terraform import \
                  -var="project_id=$PROJECT_ID" \
                  -var="region=$REGION" \
                  -var="environment=dev" \
                  -var="db_password=${{ secrets.DB_PASSWORD }}" \
                  -var="storage_bucket_name=$BUCKET_NAME" \
                  -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
                  -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}" \
                  google_compute_forwarding_rule.fr_udp500 \
                  $PROJECT_ID/$REGION/fr-udp500 || echo "‚ö†Ô∏è No se pudo importar fr-udp500"
              fi
            fi
            
            if gcloud compute forwarding-rules describe fr-udp4500 --region=$REGION --project=$PROJECT_ID >/dev/null 2>&1; then
              if ! terraform state show google_compute_forwarding_rule.fr_udp4500 >/dev/null 2>&1; then
                terraform import \
                  -var="project_id=$PROJECT_ID" \
                  -var="region=$REGION" \
                  -var="environment=dev" \
                  -var="db_password=${{ secrets.DB_PASSWORD }}" \
                  -var="storage_bucket_name=$BUCKET_NAME" \
                  -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
                  -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}" \
                  google_compute_forwarding_rule.fr_udp4500 \
                  $PROJECT_ID/$REGION/fr-udp4500 || echo "‚ö†Ô∏è No se pudo importar fr-udp4500"
              fi
            fi
            
            echo "‚úÖ Forwarding Rules procesadas"
          else
            echo "‚ÑπÔ∏è VPN Gateway no existe, Terraform lo crear√°"
          fi
          echo ""


          echo "‚úÖ Paso 3: Validando configuraci√≥n de Terraform..."
          terraform validate
          echo "‚úÖ Validaci√≥n completada"
          echo ""

          echo "üîÑ Paso 4: Sincronizando state con infraestructura real en GCP..."
          echo "   (terraform refresh detecta recursos existentes)"
          terraform refresh \
            -var="project_id=$PROJECT_ID" \
            -var="region=$REGION" \
            -var="environment=dev" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="storage_bucket_name=$BUCKET_NAME" \
            -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
            -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}" || echo "‚ö†Ô∏è Refresh completado con advertencias (normal en primera ejecuci√≥n)"
          echo ""

          echo "üìä Paso 5: Recursos actualmente en el state:"
          RESOURCE_COUNT=$(terraform state list 2>/dev/null | wc -l)
          if [ "$RESOURCE_COUNT" -eq "0" ]; then
            echo "   üì≠ No hay recursos en el state (PRIMERA EJECUCI√ìN)"
            echo "   ‚û°Ô∏è  Terraform crear√° TODA la infraestructura"
          else
            echo "   ‚úÖ State contiene $RESOURCE_COUNT recursos"
            terraform state list
            echo "   ‚û°Ô∏è  Terraform solo crear√° recursos NUEVOS o actualizar√° MODIFICADOS"
          fi
          echo ""

          echo "üìã Paso 6: Generando plan de ejecuci√≥n..."
          echo "   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "   (+) = Recursos NUEVOS que ser√°n CREADOS"
          echo "   (~) = Recursos EXISTENTES que ser√°n ACTUALIZADOS"
          echo "   (-) = Recursos que ser√°n ELIMINADOS"
          echo "   (nothing) = Sin cambios detectados"
          echo "   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""

          terraform plan \
            -var="project_id=$PROJECT_ID" \
            -var="region=$REGION" \
            -var="environment=dev" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="storage_bucket_name=$BUCKET_NAME" \
            -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
            -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}" \
            -out=tfplan
          echo ""

          echo "üèóÔ∏è Paso 7: Aplicando cambios de infraestructura..."
          echo "   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "   ‚úÖ Solo crear√° recursos NUEVOS"
          echo "   ‚úÖ Solo actualizar√° recursos MODIFICADOS"
          echo "   ‚ùå NO recrear√° recursos existentes"
          echo "      (protegidos con lifecycle blocks)"
          echo "   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""

          terraform apply -auto-approve tfplan

          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚úÖ TERRAFORM DEPLOYMENT COMPLETADO"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""

      - name: Terraform Outputs
        run: |
          cd terraform
          echo "üìä Infrastructure Outputs:"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          terraform output
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚úÖ Infrastructure deployment completed successfully!"

  # 3. DOCKER - Construir y subir imagen
  docker-build-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    needs: infrastructure
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Download app source
        uses: actions/download-artifact@v4
        with:
          name: app-source
          path: ./app

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Docker credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

           GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
      - name: Build and Push Docker images
        run: |
          cd app
          echo "üî® Building Docker image..."
          docker build -t ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }} .
          docker build -t ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:latest .

          echo "üì¶ Pushing images..."
          docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }}
          docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:latest

  # 4. DEPLOY - Desplegar aplicaci√≥n en Cloud Run
  deploy-cloud-run:
    runs-on: ubuntu-latest
    name: Deploy to Cloud Run
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
          env:
            GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
    environment: dev

    steps:
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Cloud Run credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Deploy to Cloud Run
        run: |
          echo "üöÄ Deploying to Cloud Run..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }} \
            --region=${{ secrets.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --max-instances=10 \
            --min-instances=1 \
            --port=8080 \
            --set-env-vars="SPRING_PROFILES_ACTIVE=dev,ENVIRONMENT=dev,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},CLOUD_SQL_INSTANCE_IP=10.2.0.3" \
            --vpc-connector=projects/${{ env.GCP_PROJECT_ID }}/locations/${{ secrets.REGION }}/connectors/yappa-vpc-connector \
            --vpc-egress=private-ranges-only

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ secrets.REGION }} --format='value(status.url)')
          echo "üåê Service URL: $SERVICE_URL"

          sleep 30
          curl -f "$SERVICE_URL/" && echo "‚úÖ Root: OK" || echo "‚ùå Root: FAILED"
          curl -f "$SERVICE_URL/actuator/health" && echo "‚úÖ Health: OK" || echo "‚ùå Health: FAILED"

          echo "üéâ Deployment completed!"
