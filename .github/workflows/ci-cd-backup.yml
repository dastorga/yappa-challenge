name: Yappa Challenge DevOps CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "app/**"
      - "terraform/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main, develop]

env:
  GCP_PROJECT_ID: yappa-challenge-devops
  SERVICE_NAME: yappa-spring-boot-service

jobs:
  build:
    runs-on: ubuntu-latest
    name: Maven Build and Package

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Compile and Package Spring Boot
        run: |
          cd app
          mvn clean compile package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: app/target/*.jar

      - name: Upload app source
        uses: actions/upload-artifact@v4
        with:
          name: app-source
          path: app/

  docker-build-push:
    runs-on: ubuntu-latest
    name: Docker Build and Push
    needs: terraform-apply
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Download app source
        uses: actions/download-artifact@v4
        with:
          name: app-source
          path: ./app

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Docker credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          cd app
          docker build -t ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }} .
          docker build -t ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:latest .

      - name: Push to Artifact Registry
        run: |
          docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }}
          docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:latest

  deploy-cloud-run:
    runs-on: ubuntu-latest
    name: Deploy to Cloud Run
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Cloud Run credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ secrets.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/yappa-repo/${{ env.SERVICE_NAME }}:${{ github.run_number }} \
            --region=${{ secrets.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --max-instances=10 \
            --min-instances=1 \
            --port=8080 \
            --set-env-vars="SPRING_PROFILES_ACTIVE=dev,ENVIRONMENT=dev,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},CLOUD_SQL_INSTANCE_IP=10.2.0.3" \
            --vpc-connector=projects/${{ env.GCP_PROJECT_ID }}/locations/${{ secrets.REGION }}/connectors/yappa-vpc-connector \
            --vpc-egress=private-ranges-only

      - name: Verify deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ secrets.REGION }} --format='value(status.url)')
          echo "Service deployed at: $SERVICE_URL"

          sleep 30
          curl -f "$SERVICE_URL/" || echo "Root endpoint failed"
          curl -f "$SERVICE_URL/actuator/health" || echo "Health endpoint failed"
          curl -f "$SERVICE_URL/api/info" || echo "Info endpoint failed"

  terraform-plan:
    runs-on: ubuntu-latest
    name: Terraform Plan
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform-version: 1.6.0

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Terraform credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Terraform Init and Plan
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        run: |
          cd terraform
          terraform init
          terraform validate
          terraform plan \
            -var="project_id=${{ secrets.PROJECT_ID }}" \
            -var="region=${{ secrets.REGION }}" \
            -var="environment=dev" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="storage_bucket_name=${{ secrets.STORAGE_BUCKET_NAME }}" \
            -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
            -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}"

  terraform-apply:
    runs-on: ubuntu-latest
    name: Terraform Apply
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform-version: 1.6.0

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Terraform credentials
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ secrets.PROJECT_ID }}
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Terraform Apply
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve \
            -var="project_id=${{ secrets.PROJECT_ID }}" \
            -var="region=${{ secrets.REGION }}" \
            -var="environment=dev" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="storage_bucket_name=${{ secrets.STORAGE_BUCKET_NAME }}" \
            -var="peer_external_ip=${{ secrets.PEER_EXTERNAL_IP }}" \
            -var="vpn_shared_secret=${{ secrets.VPN_SHARED_SECRET }}"
